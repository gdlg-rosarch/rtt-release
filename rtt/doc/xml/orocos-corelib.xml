<?xml version='1.0'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
<!ENTITY % oro_ents SYSTEM "http://people.mech.kuleuven.be/~psoetens/orocos/doc/orocos.ent" >
%oro_ents;
]
>

<article>
  <articleinfo>
    <title>The Orocos Core Primitives Manual</title>
    <copyright>
      <year>2002-2010</year>
      <holder>Peter Soetens, Herman Bruyninckx</holder>
    </copyright>

    <abstract>
      <para>
	This document explains the principles of the
	<emphasis>Core Library</emphasis> of &orocos;, the <emphasis>Open
	RObot COntrol Software</emphasis> project. The CoreLib provides
	infrastructural support for the functional and application components
	of the &orocos; framework.
      </para>
    </abstract>

    <revhistory>
      <revision>
	<revnumber>0.01</revnumber>
	<date>22 Aug 2002</date>
	<authorinitials>hb</authorinitials>
	<revremark>Initial version</revremark>
      </revision>
      <revision>
	<revnumber>0.9</revnumber>
	<date>11 Nov 2002</date>
	<authorinitials>ps</authorinitials>
	<revremark>lots of updates</revremark>
      </revision>
      <revision>
	<revnumber>0.11</revnumber>
	<date>29 Oct 2003</date>
	<authorinitials>ps</authorinitials>
	<revremark>Stripped Devices and OS parts</revremark>
      </revision>
      <revision>
	<revnumber>0.12</revnumber>
	<date>2 Apr 2004</date>
	<authorinitials>ps</authorinitials>
	<revremark>StateMachine updates</revremark>
      </revision>
      <revision>
	<revnumber>0.13</revnumber>
	<date>18 May 2004</date>
	<authorinitials>ps</authorinitials>
	<revremark>Change in the StateMachine interface</revremark>
      </revision>
      <revision>
	<revnumber>0.14</revnumber>
	<date>2 June 2004</date>
	<authorinitials>ps</authorinitials>
	<revremark>Clarified some parts based on feedback</revremark>
      </revision>
      <revision>
	<revnumber>0.18</revnumber>
	<date>10 Dec 2004</date>
	<authorinitials>ps</authorinitials>
	<revremark>New Event Implementation and Simulation Thread. Reordering and cleanup of Sections.</revremark>
      </revision>
      <revision>
	<revnumber>0.18.1</revnumber>
	<date>5 Jan 2005</date>
	<authorinitials>ps</authorinitials>
	<revremark>Added Logging Framework.</revremark>
      </revision>
      <revision>
	<revnumber>0.20.0</revnumber>
	<date>31 Jan 2005</date>
	<authorinitials>ps</authorinitials>
	<revremark>Added DataObject section within Buffer section. Added NonPeriodicActivity.</revremark>
      </revision>
      <revision>
	<revnumber>0.22.0</revnumber>
	<date>15 Feb 2006</date>
	<authorinitials>ps</authorinitials>
	<revremark>Removed Fifo section. Split off developer specific info.</revremark>
      </revision>
      <revision>
	<revnumber>0.24.0</revnumber>
	<date>13 April 2006</date>
	<authorinitials>ps</authorinitials>
	<revremark>'Tasks' replaced by 'Activities'.</revremark>
      </revision>
      <revision>
	<revnumber>0.25.0</revnumber>
	<date>9 August 2006</date>
	<authorinitials>ps</authorinitials>
	<revremark>Activity simplifications. 
	Added commands section.</revremark>
      </revision>
      <revision>
	<revnumber>1.2.0</revnumber>
	<date>April 18, 2007</date>
	<authorinitials>ps</authorinitials>
	<revremark>Selecting the scheduler section.</revremark>
      </revision>
      <revision>
	<revnumber>1.10.0</revnumber>
	<date>June 18, 2009</date>
	<authorinitials>ps</authorinitials>
	<revremark>Replaced PeriodicActivity and NonPeriodicActivity with Activity.</revremark>
      </revision>
      <revision>
	<revnumber>2.0</revnumber>
	<date>Feb 6, 2010</date>
	<authorinitials>ps</authorinitials>
	<revremark>Cleanup for RTT 2.0.</revremark>
      </revision>
      <revision>
	<revnumber>2.3</revnumber>
	<date>Mar 25, 2011</date>
	<authorinitials>ps</authorinitials>
	<revremark>Removing naming service class docs.</revremark>
      </revision>
    </revhistory>

    <legalnotice>
      <para>
	Permission is granted to copy, distribute and/or modify this document
	under the terms of the GNU Free Documentation License, Version 1.1 or
	any later version published by the Free Software Foundation, with no
	Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
	Texts. A copy of this license can be found at
	<ulink
	  url="http://www.fsf.org/copyleft/fdl.html">http://www.fsf.org/copyleft/fdl.html</ulink>.
      </para>
    </legalnotice>

  </articleinfo>

  <section>
    <title>Introduction</title>
    <para>
      This Chapter describes the semantics of the services
      available as the &orocos; Core Primitives
    </para>
    <para>
      The Core Primitives are:
      <itemizedlist>
	<listitem><para>Thread-safe C++ implementations for periodic, non periodic and event driven activities</para></listitem>
	<listitem><para>Synchronous/Asynchronous OperationCaller invocations</para></listitem>
	<listitem><para>Synchronous callback handling</para></listitem>
	<listitem><para>Property trees</para></listitem>
	<listitem><para>Time measurement</para></listitem>
	<listitem><para>Application logging framework</para></listitem>
	<listitem><para>Lock-free data exchange primitives such as FIFO buffers or shared data.</para></listitem>
      </itemizedlist> 
    </para>
    <blockquote>
      <para>
	<emphasis> The goal of the infrastructure is to keep
	applications deterministic and avoiding the classical pitfalls
	of letting application programmers freely use threads and
	mutexes as bare tools.</emphasis>
      </para>
    </blockquote>
    <para>
      The following sections will first introduce the reader to creating
      Activities, which execute functions in a thread, in the system. 
      Signals allow synchronous callback functions to be executed when other
      primitives are used. Operations are used to expose services.
    </para>
  </section>
  <section id="corelib-activities">
    <title>Activities</title>
    <para>
      An Activity executes a function when a 'trigger' occurs. Although, 
      ultimately, an activity is executed by a thread, it does not map
      one-to-one on a thread. A thread may execute ('serialise') multiple
      activities. This section gives an introduction to defining periodic activities,
      which are triggered periodically, non periodic activities, which are triggered
      by the user, and slave activities, which are run when another activity executes.
    </para>
    <section id="corelib-periodic-activity">
      <title>Executing a Function Periodically</title>
      <note><para>
	When you use a TaskContext, the ExecutionEngine is the function
	to be executed periodically and you don't need to write the classes
	below.
      </para>
      </note>
      <para>
	There are two ways to run a function in a periodically. By :
	<itemizedlist>
	  <listitem>
	    <para>
	      Implementing the
	      <classname>RTT::base::RunnableInterface</classname> in
	      another class ( functions initialize(), step() or
	      loop()/breakLoop() and finalize() ). The
	      RunnableInterface object (i.e. run_impl) can be assigned
	      to a activity using <synopsis> activity.run(
	      &amp;run_impl )</synopsis> or at construction time of an
	      Activity : <synopsis> Activity activity(priority,
	      period, &amp;run_impl );</synopsis>.
	    </para>
	    <para>
	      <programlisting>  #include &lt;rtt/RunnableInterface.hpp>
  #include &lt;rtt/Activity.hpp>

  class MyPeriodicFunction
	: public <classname>RTT::base::RunnableInterface</classname>
  {
  public:
    // ...
    bool initialize() {
       // your init stuff
       myperiod = this->getActivity()->getPeriod();
       isperiodic = this->getActivity()->isPeriodic();
       
       // ...
       return true; // if all went well
    }

    // executed when isPeriodic() == true
    void step() {
       // periodic actions
    }

    // executed when isPeriodic() == false
    void loop() {
       // 'blocking' version of step(). Implement also breakLoop()
    }

    void finalize() {
       // cleanup
    }
  };

  // ...
  MyPeriodicFunction run_impl_1;
  MyPeriodicFunction run_impl_2;

  <classname>RTT::Activity</classname> activity( 15, 0.01 ); // priority=15, period=100Hz
  activity.run( &amp;run_impl_1 );
  activity.start(); // calls 'step()'

  <classname>RTT::Activity</classname> npactivity(12); // priority=12, no period.
  npactivity.run( &amp;run_impl_2);
  activity.start(); // calls 'loop()'

  // etc...  </programlisting>
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Inheriting from an Activity class and overriding the initialize(), step()
	      and finalize() methods.
	      <programlisting>
  class MyOtherPeriodicFunction
      : public <classname>RTT::Activity</classname>
  {
  public :
    MyOtherPeriodicFunction()
      : <classname>RTT::Activity</classname>( 15, 0.01 ) // priority=15, period=100Hz
    {
    }

    bool initialize() {
       // your init stuff
       double myperiod = this->getPeriod();
       // ...
       return true; // if all went well
    }

    void step() {
       // periodic actions
    }

    void finalize() {
       // cleanup
    }
	// ...
  };

  // When started, will call your step
  MyOtherPeriodicFunction activity;
  activity.start();  </programlisting>
	    </para>
	  </listitem>
	</itemizedlist>
	The Activity will detect if it must run an external RunnableInterface. If none
	was given, it will call its own virtual methods.
      </para>
    </section>
    <section id="corelib-non-periodic-activity">
      <title>Non Periodic Activity Semantics</title>
      <para>
	If you want to create an activity which reads file-IO, or displays
	information or does any other possibly blocking operation, the
	<classname>RTT::Activity</classname> implementation can be
	used with a period of zero (0). When it is <function>start()</function>'ed, its loop()
	method will be called exactly once and then it will wait,
	after which it can be start()'ed again.  Analogous to a periodic
	Activity, the user can implement
	<function>initialize()</function>, <function>loop()</function>
	and <function>finalize()</function> functions in a
	<classname>RTT::base::RunnableInterface</classname> which will be used by
	the activity for executing the user's functions. Alternatively,
	you can reimplement said functions in a derived class of
	Activity.
      </para>
      <programlisting>  int priority = 5;
  
  <classname>RTT::base::RunnableInterface</classname>* blocking_activity = ...
  <classname>RTT::Activity</classname> activity( priority, blocking_activity );
  activity.start(); // calls blocking_activity->initialize()

  // now blocking_activity->loop() is called in a thread with priority 5.  
  // assume loop() finished...

  activity.start();  // executes again blocking_activity->loop()

  // calls blocking_activity->breakLoop() if loop() is still executing,
  // when loop() returned, calls blocking_activity->finalize() :
  activity.stop(); </programlisting>
      <para>
	The Activity behaves differently when being non periodic
	in the way start() and stop()
	work. Only the first invocation of start() will invoke initialize() and
	then loop() once.
	Any subsequent call to start() will cause loop() to be executed again
	(if it finished in the first place).
      </para>
      <para>	
	Since the user's loop() is allowed to block the user must reimplement the
	<function>RunnableInterface::breakLoop()</function>
	function. This function must do whatever necessary to let the
	user's loop() function return (mostly set a flag).  It must return true on
	success, false if it was unable to let the loop() function
	return (the latter is the default implementation's return
	value).  <function>stop()</function> then waits until loop()
	returns or aborts if <function>breakLoop()</function> returns
	false. When successful, stop() executes the finalize() function.
      </para>
    </section>
    <section>
      <title>Selecting the Scheduler</title>
      <para>
	There are at least two scheduler types in RTT: The real-time
	scheduler, ORO_SCHED_RT, and the not real-time scheduler, ORO_SCHED_OTHER.
	In some systems, both may map to the same scheduler. 
      </para>
      <para>
	When a <classname>RTT::Activity</classname>, it
	runs in the default 'ORO_SCHED_OTHER' scheduler with the lowest priority. You
	can specify another priority and scheduler type, by providing an extra argument
	during construction. When a priority is specified, the Activity selects the
	the ORO_SCHED_RT scheduler.
      </para>
      <programlisting>  // Equivalent to Activity my_act(OS::HighestPriority, 0.001) :
  Activity my_act(ORO_SCHED_RT, OS::HighestPriority, 0.001);

  // Run in the default scheduler (not real-time):
  Activity other_act ( 0.01 );
      </programlisting>
    </section>
    <section id="corelib-slave-activity">
      <title>Custom or Slave Activities</title>
      <para>
	If none of the above activity schemes fit you, you can always fall back on
	the <classname>RTT::extras::SlaveActivity</classname>, which lets the user
	control when the activity is executed. A special function <function>bool execute()</function>
	is implemented which will execute <function>RunnableInterface::step()</function>
	or <function>RunnableInterface::loop()</function> when called by the user.
	Three versions of the <classname>SlaveActivity</classname> can be constructed:
	<programlisting>  #include &lt;rtt/SlaveActivity.hpp>

  // <emphasis>With master</emphasis>
  // a 'master', any ActivityInterface (even SlaveActivity):
  <classname>RTT::Activity</classname> master_one(9, 0.001 );
  // a 'slave', takes over properties (period,...) of 'master_one':
  <classname>RTT::extras::SlaveActivity</classname> slave_one( &amp;master_one );

  slave_one.start();   // fail: master not running.
  slave_one.execute(); // fail: slave not running.

  master_one.start();  // start the master.
  slave_one.start();   // ok: master is running.
  slave_one.execute(); // ok: calls step(), repeat...
  
  // <emphasis>Without master</emphasis>
  // a 'slave' without explicit master, with period of 1KHz.
  <classname>RTT::extras::SlaveActivity</classname> slave_two( 0.001 );
  // a 'slave' without explicit master, not periodic.
  <classname>RTT::extras::SlaveActivity</classname> slave_three;

  slave_two.start();   // ok: start periodic without master
  slave_two.execute(); // ok, calls 'step()', repeat...
  slave_two.stop();

  slave_three.start();   // start not periodic.
  slave_three.execute(); // ok, calls 'loop()', may block !
  // <emphasis>if loop() blocks, execute() blocks as well.</emphasis>
	</programlisting>
      </para>
      <para>
	Note that although there may be a master, it is still the
	user's responsibility to get a pointer to the slave and
	call <function>execute()</function>.
      </para>
      <para>
	There is also a <function>trigger()</function> function for
	slaves with a non periodic
	master. <function>trigger()</function> will in that case call
	trigger() upon the master thread, which will cause it to
	execute. The master thread is then still responsible to call
	execute() on the slave. In constrast, calling
	<function>trigger()</function> upon periodic slaves or periodic
	activities will always fail. Periodic activities are triggered
	internally by the elapse of time.
      </para>

    </section>
    <section id="corelib-threads">
      <title>Configuring the Threads from Activities</title>
      <para>
	Each Orocos Activity (periodic, non periodic and event driven)
	type has a <function>thread()</function> method in its
	interface which gives a non-zero pointer to a
	<classname>RTT::os::ThreadInterface</classname> object which provides
	general thread information such as the priority and periodicity and allows to
	control the real-timeness of the thread which runs this activity. A
	non periodic activity's thread will return a period of zero.
      </para>
      <para>
	A <classname>RTT::base::RunnableInterface</classname> can get the same information
	through the <function>this->getActivity()->thread()</function> method calls.
      </para>
      <para>
	<example>
	<title>Example Periodic Thread Interaction</title>
	<para>
	    This example shows how to manipulate a thread.
	</para>
	<programlisting>#include "rtt/ActivityInterface.hpp"

using namespace RTT;

ORO_main( int argc, char** argv)
{
  // ... create any kind of Activity like above.

  <classname>RTT::base::ActivityInterface</classname>* act = ...

  // stop the thread and all its activities:
  act->thread()->stop();
  // change the period:
  act->thread()->setPeriod( 0.01 );

  // ORO_SCHED_RT: real-time  ORO_SCHED_OTHER: not real-time.
  act->thread()->setScheduler(ORO_SCHED_RT);

  act->thread()->start();

  // act is running...

  return 0;
}</programlisting>
      </example>
      </para>
    </section>
  </section>
  <section id="corelib-events">
    <title>Signals</title>
    <para>
      An <classname>RTT::internal::Signal</classname> is an object to
      which one can connect callback functions. When the Signal is
      raised, the connected functions are called one after the
      other. An Signal can carry data and deliver it to the function's
      arguments.
    </para>
    <para>
      Any kind of function can be connected to the signal as long as it has the
      same signature as the Signal. 'Raising', 'firing' or 'emitting' an Orocos Signal is
      done by using <methodname>operator()</methodname>.
    </para>
    <section>
      <title>Signal Basics</title>
      <example id="core-event-example">
      <title>Using Signals</title>
      <para>
	This example shows how a handler is connected to an Signal.
      </para>
      </example>
      <para>
      <programlisting> #include &lt;rtt/internal/Signal.hpp>

 using boost::bind;

 class SafetyStopRobot {
 public:
    void handle_now() {
        std::cout &lt;&lt; " Putting the robot in a safe state fast !" &lt;&lt; std::endl;
    }
 };

 SafetyStopRobot safety;
 </programlisting>
      </para>
      <para>
      Now we will connect the handler function to a signal. Each event-handler connection
      is stored in a Handle object, for later reference and connection management.
      <programlisting> // The &lt;..> means the callback functions must be of type "void foo(void)"
 <classname>RTT::internal::Signal</classname>&lt;void(void)> emergencyStop;
 // Use ready() to see if the event is initialised.
 assert( emergencyStop.ready() );
 <classname>RTT::Handle</classname> emergencyHandle;
 <classname>RTT::Handle</classname> notifyHandle;

 // boost::bind is a way to connect the method of an object instance to
 // an event.
 std::cout &lt;&lt; "Register appropriate handlers to the Emergency Stop Signal\n";
 emergencyHandle = 
   emergencyStop.connect( bind( &amp;SafetyStopRobot::handle_now, &amp;safety));
 assert( emergencyHandle.connected() );</programlisting>
      </para>
      <para>
      Finally, we emit the event and see how the handler functions are called:
      <programlisting> std::cout &lt;&lt; "Emit/Call the event\n";
 emergencyStop();</programlisting></para>
      <para>
	The program will output these messages:
      <screen>
     Register appropriate handlers to the Emergency Stop Signal
     Emit the event
      Putting the robot in a safe state fast !
      </screen>
      </para>
      <para>
	If you want to find out how boost::bind works, see the Boost
	<ulink url="http://www.boost.org/libs/bind/bind.html">bind manual</ulink>.
	You must use bind if you want to call C++ class member functions to 
	'bind' the member function to an object :
	<programlisting>  ClassName object;
  boost::bind( &amp;ClassName::FunctionName, &amp;object)	</programlisting>
	Where ClassName::FunctionName must have the same signature as the Signal.
	When the Signal is called,
	<programlisting>
  object->FunctionName( args )</programlisting>
	is executed by the Signal.
      </para>
      <para>When you want to call free ( C ) functions, you do not need bind :
	<programlisting>  Signal&lt;void(void)> event;
  void foo() { ... }
  event.connect( &amp;foo );</programlisting>
      </para>
    <para>
      You must choose the type of <classname>RTT::internal::Signal</classname> upon
      construction. This can no longer be changed once the
      <classname>RTT::internal::Signal</classname> is created. If the type changes,
      the event() method must given other arguments. For example :
      <example>
	<title>Signal Types</title>
	<programlisting>  <classname>RTT::internal::Signal</classname>&lt;void(void)> e_1;
  e_1();

  <classname>RTT::internal::Signal</classname>&lt;void(int)>  e_2;
  e_2( 3 );

  <classname>RTT::internal::Signal</classname>&lt;void(double,double,double)>  positionSignal;
  positionSignal( x, y, z);</programlisting>
      </example>
    </para>
    <para>
      Furthermore, you need to setup the connect call differently if the Signal
      carries one or more arguments :
      <programlisting>  SomeClass someclass;

  Signal&lt;void(int, float)&gt; event;

  // notice that for each Signal argument, you need to supply _1, _2, _3, etc...
  event.connect( boost::bind( &amp;SomeClass::foo, someclass, _1, _2 ) );

  event( 1, 2.0 );</programlisting>
    </para>
    <important>
    <para>
      The return type of callbacks is ignored and can not be recovered.
    </para>
    </important>
    </section>
    <section>
      <title><function>setup()</function> and the <classname>RTT::Handle</classname> object</title>
      <para>
	Signal connections can be managed by using a Handle which both <function>connect()</function>
	and <function>setup()</function> return :
	<programlisting>  <classname>RTT::internal::Signal</classname>&lt;void(int, float)&gt; event;
  <classname>RTT::Handle</classname> eh;

  // store the connection in 'eh'
  eh = event.connect( ... );
  assert( eh.connected() );

  // disconnect the function(s) :
  eh.disconnect();
  assert( !eh.connected() );

  // reconnect the function(s) :
  eh.connect();
  // connected again !
	</programlisting>
	Handle objects can be copied and will all show the same status.
	To have a connection setup, but not connected, one can write :
	<programlisting>  <classname>RTT::internal::Signal</classname>&lt;void(int, float)&gt; event;
  <classname>RTT::Handle</classname> eh;

  // setup : store the connection in 'eh'
  eh = event.setup( ... );
  assert( !eh.connected() );

  // now connect the function(s) :
  eh.connect();
  assert( eh.connected() );  // connected !
	</programlisting>
	If you do not store the connection of setup(), the connection will never
	be established and no memory is leaked. If you do not use 'eh' to connect
	and destroy this object, the connection is also cleaned up. If you use
	'eh' to connect and then destroy 'eh', you can never terminate the connection,
	except by destroying the Signal itself.
      </para>
    </section>
  </section>
  <section>
    <title>Time Measurement and Conversion</title>
    <section>
      <title>The TimeService</title>
      <para>
	The <classname>RTT::os::TimeService</classname> is implemented using the
	Singleton design pattern.
	You can query it for the current (virtual) time in clock ticks or in seconds.
	The idea here is that it is responsible for synchronising with other (distributed)
	cores, for doing, for example compliant motion with two robots. This functionality
	is not yet implemented though.
      </para>
      <para>
	When the <classname>RTT::extras::SimulationThread</classname> is used and started, it will change the TimeService's
	clock with each period ( to simulate time progress).
	Also other threads (!) In the system will notice this change, but
	time is guaranteed to increase monotonously.
      </para>
    </section>
    <section>
      <title>Usage Example</title>
      <para>
	Also take a look at the interface documentation.
	<programlisting>  #include &lt;rtt/os/TimeService.hpp>
  #include &lt;rtt/Time.hpp>

  TimeService::ticks timestamp = <classname>RTT::os::TimeService</classname>::Instance()->getTicks();
  //...

  Seconds elapsed = TimeService::Instance()->secondsSince( timestamp );	</programlisting>
      </para>
    </section>
  </section>
  <section id="corelib-attributes">
    <title>Attributes</title>
    <para>
      Attributes are class members which contain a (constant) value. Orocos
      can manipulate a classes attribute when it is wrapped in an
      <classname>RTT::Attribute</classname> class. This storage allows
      it to be read by the scripting engine, to be displayed on screen or manipulated
      over a network connection.
    </para>
    <para>
      The advantages of this class come clear when building Orocos Components,
      since it allows a component to make internal data to its scripts.
    </para>
    <para>
      <example><title>Creating attributes</title> 
	      <programlisting>
  // an attribute, representing a double of value 1.0:
  <classname>RTT::Attribute</classname>&lt;double> myAttr(1.0);
  myAttr.set( 10.9 );
  double a = myAttr.get(); 

  // read-only attribute:
  <classname>RTT::Constant</classname>&lt;double> pi(3.14);
  double p = pi.get();
</programlisting>
      </example>
    </para>
  </section>
  <section id="corelib-properties">
    <title>Properties</title>
    <para>
      Properties are more powerful than attributes (above) since they can be
      stored to an XML format, be hierarchically structured and allow complex
      configuration. 
    </para>
    <section>
      <title>Introduction</title>
      <para>
	Orocos provides configuration by properties through the <classname>RTT::Property</classname>
	class.
	They are used to store primitive data (float, strings,...) in
	a hierarchies (using <classname>RTT::PropertyBag</classname>). A Property can be changed by the user and has immediate
	effect on the behaviour of the program. Changing parameters of an
	algorithm is a good example where properties can be used. Each parameter
	has a value, a name and a description. The user can ask any PropertyBag
	for its contents and change the values as they see fit. Java for
	example presents a Property API. 
	The Doxygen Property API should
	provide enough information for successfully using them in your Software Component.
	<note>
	  <para>
	    Reading and writing a properties value can be done in
	    real-time. Every other transaction, like marshaling
	    (writing to disk), demarshaling (reading from disk) or
	    building the property is not a real-time operation.
	  </para>
	  <para>
	    <example><title>Using properties</title> 
	      <programlisting>
  // a property, representing a double of value 1.0:

  <classname>RTT::Property</classname>&lt;double> myProp("Parameter A","A demo parameter", 1.0); // not real-time !
  myProp = 10.9; // real-time
  double a = myProp.get(); // real-time  </programlisting>
	    </example>
	  </para>
	</note>
      </para>
      <para>
	Properties are mainly used for two purposes. First, they allow an external
	entity to browse their contents, as they can form hierarchies using
	PropertyBags. Second, they can be written to screen, disk,
	or any kind of stream and their contents can be restored later on, for example
	after a system restart. The next sections give a short introduction to these
	two usages.
      </para>
    </section>
    <section>
      <title>Grouping Properties in a PropertyBag</title>
      <para>
	First of all, a <classname>RTT::PropertyBag</classname> is not the owner of the properties it owns,
	it merely keeps track of them, it defines a logical group of properties
	belonging together. Thus when you delete a bag, the properties in it are
	not deleted, when you clone() a bag, the properties are not cloned
	themselves. PropertyBag is thus a container of pointers to Property objects.
      </para>
      <para>
	If you want to duplicate the contents of a PropertyBag or perform recursive
	operations on a bag, you can use the helper functions we created and which
	are defined in <filename>PropertyBag.hpp</filename> (see Doxygen documentation).
	These operations are however, most likely not real-time.
      </para>
      <note><para>When you want to put a PropertyBag into another PropertyBag, you need
      to make a Property&lt;PropertyBag&gt; and insert that property into the 
      first bag.</para>
      </note>
      <para> Use <methodname>add</methodname> to add Properties to a bag and 
       <methodname>getProperty(name)</methodname> to
       mirror a <classname>RTT::Property</classname>&lt;T&gt;. Mirroring allows
       you to change and read a property which is stored in a PropertyBag: the
       property object's value acts like the original. The name and description
       are not mirrored, only copied upon initialisation:
	<programlisting>  <classname>RTT::PropertyBag</classname> bag;
  <classname>RTT::Property</classname>&lt;double&gt; w("Weight", "in kilograms", 70.5 );
  <classname>RTT::Property</classname>&lt;int&gt; pc("PostalCode", "", 3462 );

  struct BirthDate {
     BirthDate(int d, month m, int y) : day(d), month(m), year(y) {}
     int day;
     enum { jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec} month;
     int year;
  };

  <classname>RTT::Property</classname>&lt;BirthDate&gt; bd("BirthDate", " in 'BirthDate' format", BirthDate(1, apr, 1977));

  bag.add( &amp;w );
  bag.add( &amp;pc );
  bag.add( &amp;bd );

  // setup mirrors:	
  <classname>RTT::Property</classname>&lt;double&gt; weight = bag.getProperty("Weight");
  assert( weight.ready() );

  // values are mirrored:
  assert( weight.get() == w.get() );
  weight.set( 90.3 );
  assert( weight.get() == w.get() );

  <classname>RTT::Property</classname>&lt;BirthDate&gt; bd_bis;
  assert( ! bd_bis.ready() );
  
  bd_bis = bag.getProperty("BirthDate");
  assert( bd_bis.ready() );

  // descriptions and names are not mirrored:
  assert( bd_bis.getName() == bd.getName() );
  bd_bis.setName("Date2");
  assert( bd_bis.getName() != bd.getName() );</programlisting>
      </para>
    </section>
    <section>
      <title>Marshalling and Demarshalling Properties (Serialization)</title>
      <para>
	Marshalling is converting a property C++ object to a format
	suitable for transportation or storage, like XML. Demarshalling
	reconstructs the property again from the stored format. In
	Orocos, the <classname>RTT::marsh::Marshaller</classname>
	interface defines how properties can be marshalled.  The
	available marshallers (property to file) in Orocos are the
	<classname>RTT::marsh::TinyMarshaller</classname>,
	<classname>RTT::marsh::XMLMarshaller</classname>,
	<classname>RTT::marsh::XMLRPCMarshaller</classname>,
	<classname>RTT::marsh::INIMarshaller</classname> and the
	RTT::marsh::CPFMarshaller (only if Xerces is available).  
      </para>
      <para>
	The inverse operation (file to property) is currently
	supported by two demarshallers:
	<classname>RTT::marsh::TinyDemarshaller</classname> and the
	RTT::marsh::CPFDemarshaller (only if Xerces is available).  They
	implement the <classname>RTT::marsh::Demarshaller</classname>
	interface.
      </para>
      <para>
	The (de-)marshallers know how to convert native C++ types, but if you want
	to store your own classes in a Property ( like <classname>BirthDate</classname>
	in the example above ), the class must be added to the Orocos
	type system.
      </para>
      <para>
	In order to read/write portably (XML) files, use the
	<classname>RTT::marsh::PropertyMarshaller</classname> and
	<classname>RTT::marsh::PropertyDemarshaller</classname> classes which
	use the default marshaller behind the scenes.
      </para>
    </section>
  </section>
  <section id="corelib-extras">
    <title>Extra Stuff</title>
  <section id="corelib-buffers-data">
    <title>Buffers and DataObjects</title>
    <para>
      The difference between Buffers and DataObjects is that DataObjects
      always contain a single value, while buffers may be empty, full or contain
      a number of values.
      Thus a <classname>RTT::internal::DataObject</classname> always returns the last value written (and a
      write always succeeds), while a buffer
      may implement a FIFO queue to store all written values (and thus can get full).
    </para>
    <section id="corelib-buffers">
      <title>Buffers</title>
      <para>
	The <classname>RTT::base::BufferInterface</classname>&lt;T&gt; provides
	the interface for Orocos buffers. Currently the <classname>RTT::base::BufferLockFree</classname>&lt;T&gt;
	is a typed buffer of type <emphasis>T</emphasis> and works as
	a FIFO queue for storing elements of type T.
	It is lock-free, non blocking and read and writes
	happen in bounded time. It is not subject to priority inversions.
      </para>
	<example>
	  <title>Accessing a Buffer</title>
	  <programlisting>  #include &lt;rtt/BufferLockFree.hpp>

  // A Buffer may also contain a class, instead of the simple
  // double in this example
  // A buffer with size 10:
  <classname>RTT::base::BufferLockFree</classname>&lt;double> my_Buf( 10 ); 
  if ( my_Buf.Push( 3.14 ) ) {
     // ok. not full.
  }
  double  contents; 
  if ( my_Buf.Pop( contents ) ) {
     // ok. not empty.
     // contents == 3.14
  }</programlisting></example>
       <para>
	 Both <function>Push()</function> and <function>Pop()</function>
	 return a boolean to indicate failure or success.
       </para>
    </section>
    <section id="corelib-data-objects">
      <title>DataObjects</title>
      <para>
	The data inside the <classname>RTT::base::DataObject</classname>s can be any valid C++ type,
	so mostly people use classes or structs, because these carry
	more semantics than just (vectors of) doubles. The default
	constructor of the data is called when the DataObject is
	constructed.  Here is an example of creating and using a
	DataObject :
	<example>
	  <title>Accessing a DataObject</title>
	  <programlisting>  #include &lt;rtt/DataObjectInterfaces.hpp>

  // A DataObject may also contain a class, instead of the simple
  // double in this example
  <classname>RTT::base::DataObjectLockFree</classname>&lt;double> my_Do("MyData"); 
  my_Do.Set( 3.14 ); 
  double  contents; 
  my_Do.Get( contents );   // contents == 3.14
  contents  = my_Do.Get(); // equivalent  </programlisting>
	</example>
      </para>
      <para>
	The virtual <classname>RTT::base::DataObjectInterface</classname> interface
	provides the <function>Get()</function> and
	<function>Set()</function> methods that each DataObject must
	have. Semantically, <function>Set()</function> and
	<function>Get()</function> copy all contents of the
	DataObject.
      </para>
    </section>
  </section>
  </section>
  <section id="corelib-logging">
    <title>Logging</title>
    <para>
      Orocos applications can have pretty complex start-up and
      initialisation code.  A logging framework, using
      <classname>RTT::Logger</classname> helps to track what
      your program is doing.
    </para>
      <note><para>Logging can
      only be done in the non-real-time parts of your application, thus not in
	the Real-time Periodic Activities !</para></note>
    <para>
      There are currently 8 log levels :
      <table>
	<title>Logger Log Levels</title>
	<tgroup cols="3">
	  <thead>
	    <row>
	      <entry>ORO_LOGLEVEL</entry>
	      <entry>Logger::enum</entry>
	      <entry>Description</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>-1</entry>
	      <entry>na</entry>
	      <entry>Completely disable logging</entry>
	    </row>
	    <row>
	      <entry>0</entry>
	      <entry>Logger::Never</entry>
	      <entry>Never log anything (to console)</entry>
	    </row>
	    <row>
	      <entry>1</entry>
	      <entry>Logger::Fatal</entry>
	      <entry>Only log Fatal errors. System will abort immediately.</entry>
	    </row>
	    <row>
	      <entry>2</entry>
	      <entry>Logger::Critical</entry>
	      <entry>Only log Critical or worse errors. System may abort shortly after.</entry>
	    </row>
	    <row>
	      <entry>3</entry>
	      <entry>Logger::Error</entry>
	      <entry>Only log Errors or worse errors. System will come to a safe stop.</entry>
	    </row>
	    <row>
	      <entry>4</entry>
	      <entry>Logger::Warning</entry>
	      <entry>[Default] Only log Warnings or worse errors. System will try to resume anyway.</entry>
	    </row>
	    <row>
	      <entry>5</entry>
	      <entry>Logger::Info</entry>
	      <entry>Only log Info or worse errors. Informative messages.</entry>
	    </row>
	    <row>
	      <entry>6</entry>
	      <entry>Logger::Debug</entry>
	      <entry>Only log Debug or worse errors. Debug messages.</entry>
	    </row>
	    <row>
	      <entry>7</entry>
	      <entry>Logger::RealTime</entry>
	      <entry>Log also messages from possibly Real-Time contexts. Needs to be confirmed
	      by a function call to Logger::allowRealTime().</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </para>
    <para>
      You can change the amount of log info printed on your console by setting the environment variable
      <envar>ORO_LOGLEVEL</envar> to one of the above numbers :
      <screen>
  export ORO_LOGLEVEL=5</screen>
      The default is level 4, thus only warnings and errors are printed.
    </para>
    <para>
      The <emphasis>minimum</emphasis> log level for the <filename>orocos.log</filename>
      file is <parameter>Logger::Info</parameter>. It will get more verbose if
      you increase <envar>ORO_LOGLEVEL</envar>, but will not go below Info. 
      This file is always created if the logging infrastructure is used. You can inspect this file
      if you want to know the most useful information of what is happening inside Orocos.
    </para>
    <para>If you want to disable logging completely, use <screen>export ORO_LOGLEVEL=-1</screen>
      before you start your program.</para>
    <para>
      For using the <classname>RTT::Logger</classname> class in your own application, consult
      the API documentation.
    </para>
    <example>
      <title>Using the Logger class</title>
      <programlisting>  #include &lt;rtt/Logger.hpp>

  Logger::In in("MyModule");
  log( Error ) &lt;&lt; "An error Occured : " &lt;&lt; 333 &lt;&lt; "." &lt;&lt; endlog();
  log( Debug ) &lt;&lt; debugstring &lt;&lt; data &lt;&lt; endlog();
  log() &lt;&lt; " more debug info." &lt;&lt; data &lt;&lt; endlog();
  log() &lt;&lt; "A warning." &lt;&lt; endlog( Warning );</programlisting>
      <para>As you can see, the Logger can be used like the standard C++ input streams.
	You may change the Log message's level using the LogLevel
	enums in front (using log() ) or at the end (using endlog()) of the log message.
	When no log level is specified, the previously set level is used.
	The above message could result in :
      </para>
      <screen>
  0.123 [ ERROR  ][MyModule] An error Occured : 333
  0.124 [ Debug  ][MyModule] &lt;contents of debugstring and data >
  0.125 [ Debug  ][MyModule]  more debug info. &lt;...data...>
  0.125 [ WARNING][MyModule] A warning.</screen>
    </example>
  </section>
</article>

